{"version":3,"file":"static/webpack/static/development/pages/canvas-prototype-wip.js.2c4e48b03c248ae749f8.hot-update.js","sources":["webpack:///./pages/canvas-prototype-wip.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Canvas } from '../components/canvas';\nimport Pizzicato  from 'pizzicato';\nimport { List } from 'react-virtualized';\n\nconst WIDTH = 1000;\nconst HEIGHT = 1000;\nconst SCALE = 1;\n\nlet getMousePos = (ctx, evt) => {\n  var rect = ctx.canvas.getBoundingClientRect();\n\n  var x = Math.floor((evt.clientX - rect.left) / SCALE);\n  var y = Math.floor((evt.clientY - rect.top) / SCALE);\n\n  // Ensure we never get numbers out of the bounds of the canvas.\n  // This can happen if the mouse moves quickly off the canvas.\n  x = Math.min(WIDTH-1, x);\n  y = Math.min(HEIGHT-1, y);\n\n  x = Math.max(0, x);\n  y = Math.max(0, y);\n\n  return {x, y};\n};\n\nlet multiplyPixels = (ctx, factor) => {\n  // Brighten the canvas\n  // get raw pixel values\n  var imageData = ctx.getImageData(0, 0, WIDTH, HEIGHT);\n  var pixels = imageData.data;\n  // modify each pixel\n  for(var i = 0; i < pixels.length; i += 4) {\n     // red is pixels[i];\n     // green is pixels[i + 1];\n     // blue is pixels[i + 2];\n     // alpha is pixels[i + 3];\n     // all values are integers between 0 and 255\n     // do with them whatever you like. Here we are reducing the color volume to 75%\n     // without affecting the alpha channel\n     pixels[i] = pixels[i] * factor;\n     pixels[i+1] = pixels[i+1] * factor;\n     pixels[i+2] = pixels[i+2] * factor;\n  }\n  // write modified pixels back to canvas\n  ctx.putImageData(imageData, 0, 0);\n}\n\nlet multiplyPixel = (ctx, x, y, factor) => {\n  // Brighten the canvas\n  // get raw pixel values\n  var imageData = ctx.getImageData(x, y, 1, 1);\n  var pixels = imageData.data;\n  // modify each pixel\n  for(var i = 0; i < pixels.length; i += 4) {\n     // red is pixels[i];\n     // green is pixels[i + 1];\n     // blue is pixels[i + 2];\n     // alpha is pixels[i + 3];\n     // all values are integers between 0 and 255\n     // do with them whatever you like. Here we are reducing the color volume to 75%\n     // without affecting the alpha channel\n     pixels[i] = pixels[i] * factor;\n     pixels[i+1] = pixels[i+1] * factor;\n     pixels[i+2] = pixels[i+2] * factor;\n  }\n  // write modified pixels back to canvas\n  ctx.putImageData(imageData, x, y);\n}\n\nexport class Index extends Component {\n  constructor(props) {\n    super(props);\n\n    if (typeof window !== 'undefined') {\n      this.dragStartSound = new Pizzicato.Sound(\"/static/dragstart.mp3\");\n      this.draggingSound = new Pizzicato.Sound(\"/static/dragging.mp3\");\n      this.dragStopSound = new Pizzicato.Sound(\"/static/dragend.mp3\");\n      this.dragFailSound = new Pizzicato.Sound(\"/static/dragfail.mp3\");\n    }\n\n    this.state = {\n      dragging: false,\n      selection: {},\n      currentMousePosition: {x: 0, y: 0},\n    }\n  }\n\n  canvasReady = (ctx) => {\n    console.log(ctx);\n    this.ctx = ctx;\n    this.imageData = ctx.getImageData(0,0,WIDTH,HEIGHT);\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"keydown\", this.onEsc, false);\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"keydown\", this.onEsc, false);\n  }\n\n  onEsc = (event) => {\n    if(event.keyCode === 27) {\n      this.clearSelection();\n    }\n  }\n\n  clearSelection = () => {\n    // Return canvas to original brightness.\n    this.ctx.putImageData(this.imageData, 0,0)\n\n    this.setState({\n      selection: {}\n    })\n  }\n\n  mouseMove = (ctx, evt, dragging) => {\n    if (this.state.dragging) {\n      let mousePos = getMousePos(ctx, evt);\n\n      var x1 = this.state.selection.x1;\n      var y1 = this.state.selection.y1;\n      var x2 = mousePos.x;\n      var y2 = mousePos.y;\n\n      if (x1 > x2) {\n        x1 = x2;\n        x2 = this.state.selection.x1;\n      }\n\n      if (y1 > y2) {\n        y1 = y2;\n        y2 = this.state.selection.y1;\n      }\n\n      this.setState({\n        selection: {x1: this.state.selection.x1, y1: this.state.selection.y1, x2: mousePos.x, y2: mousePos.y}\n      });\n\n      let width = x2 - x1;\n      let height = y2 - y1;\n\n      if (width >= 0 && height >= 0) {\n        let imageData = this.selectionContext.getImageData(\n          x1,\n          y1,\n          width+1,\n          height+1,\n        )\n\n        let selectionCtx = this.refs.selectionCanvas.getContext(\"2d\");\n        selectionCtx.clearRect(0, 0, 100, 100);\n\n        ctx.putImageData(this.imageData, 0, 0)\n        multiplyPixels(ctx, 0.5)\n        ctx.putImageData(imageData, x1, y1)\n        selectionCtx.putImageData(imageData,0,0);\n      }\n    } else {\n      let mousePos = getMousePos(ctx, evt);\n\n      this.setState({\n        currentMousePosition: mousePos\n      });\n\n      if (this.state.hovering) {\n        // multiplyPixel(ctx, this.state.currentMousePosition.x, this.state.currentMousePosition.y, 2)\n      } else {\n        multiplyPixels(ctx, 0.5)\n        this.setState({\n          hovering: true\n        });\n      }\n    }\n  }\n\n  mouseOut = (ctx, evt) => {\n    if (this.state.dragging) {\n      this.mouseUp(ctx, evt);\n    }\n\n    this.setState({\n      currentMousePosition: {x:0, y:0}\n    })\n\n    if (this.state.hovering) {\n      ctx.putImageData(this.imageData, 0, 0);\n      this.setState({\n        hovering: false\n      });\n    }\n  }\n\n  mouseDown = (ctx, evt) => {\n    // Return canvas to original brightness.\n    ctx.putImageData(this.imageData, 0,0)\n\n    this.selectionCanvas = document.createElement(\"canvas\");\n    this.selectionCanvas.width = WIDTH;\n    this.selectionCanvas.height = HEIGHT;\n    this.selectionContext = this.selectionCanvas.getContext(\"2d\");\n    this.selectionContext.putImageData(this.imageData, 0, 0);\n\n    this.dragStartSound.play();\n    let mousePos = getMousePos(ctx, evt);\n    this.setState({\n      dragging: true,\n      selection: {\n        x1: mousePos.x,\n        y1: mousePos.y,\n        x2: mousePos.x,\n        y2: mousePos.y\n      }\n    });\n\n    // Darken the canvas.\n    multiplyPixels(ctx, 0.50);\n    this.mouseMove(ctx,evt);\n  }\n\n  mouseUp = (ctx, evt) => {\n    if (this.state.dragging) {\n      let mousePos = getMousePos(ctx, evt);\n      this.setState({\n        dragging: false,\n        selection: Object.assign({}, this.state.selection, {x2: mousePos.x, y2: mousePos.y})\n      });\n\n      let width = mousePos.x - this.state.selection.x1;\n      let height = mousePos.y - this.state.selection.y1\n\n      let selectionCtx = this.refs.selectionCanvas.getContext(\"2d\");\n      selectionCtx.clearRect(0, 0, 100, 100);\n\n      if (width !== 0 && height !== 0) {\n        // Grab the selected region and put it in the selection preview.\n        let imageData = ctx.getImageData(\n          this.state.selection.x1,\n          this.state.selection.y1,\n          width,\n          height,\n        )\n\n        selectionCtx.putImageData(imageData,0,0);\n\n        this.dragStopSound.play();\n      } else {\n        this.dragStopSound.play();\n      }\n    }\n  }\n\n  selectedPixels = () => {\n    var pixels = [];\n\n    var x1 = this.state.selection.x1;\n    var y1 = this.state.selection.y1;\n    var x2 = this.state.selection.x2;\n    var y2 = this.state.selection.y2;\n\n    if (x1 > x2) {\n      x1 = x2;\n      x2 = this.state.selection.x1;\n    }\n\n    if (y1 > y2) {\n      y1 = y2;\n      y2 = this.state.selection.y1;\n    }\n\n    for (var y = y1; y <= y2; y++) {\n      for (var x = x1; x <= x2; x++) {\n        pixels.push((y*(WIDTH))+x)\n      }\n    }\n\n    return pixels;\n  }\n\n  rowRenderer = ({\n    key,         // Unique key within array of rows\n    index,       // Index of row within collection\n    isScrolling, // The List is currently being scrolled\n    isVisible,   // This row is visible within the List (eg it is not an overscanned row)\n    style        // Style object to be applied to row (to position it)\n  }) => {\n    return (\n      <div\n        key={key}\n        style={style}\n      >\n        Pixel #{this.selectedPixels()[index]}\n      </div>\n    )\n  }\n\n  render() {\n    return <div className=\"main\">\n      <div className=\"header\">\n        <h1>everi<span>Pixel</span></h1>\n        <style jsx>\n          {`\n            h1 {\n              color: #858585;\n              font-size: 24px;\n              margin: 0;\n            }\n\n            h1 span {\n              color: #fff\n            }\n\n            .header {\n              border-bottom: 1px solid #222222;\n              padding: 20px;\n              margin-bottom: 20px;\n            }\n          `}\n        </style>\n      </div>\n\n      <Canvas\n        width={WIDTH}\n        height={HEIGHT}\n        onReady={this.canvasReady}\n        onMouseOut={this.mouseOut}\n        onMouseMove={this.mouseMove}\n        onMouseDown={this.mouseDown}\n        onMouseUp={this.mouseUp}\n        scale={SCALE}\n      />\n\n      <div className=\"controls\">\n        <div className=\"selection\">\n          <div className=\"selectionPreview\">\n            <canvas width=\"100px\" height=\"100px\" ref=\"selectionCanvas\"></canvas>\n          </div>\n          <h2>\n            {\n              (this.state.selection.x1 !== undefined) ?\n              <div>\n              Selection&nbsp;\n              <span onClick={this.clearSelection}>[ESC]</span>\n              </div>\n              :\n              \"No selection\"\n            }\n          </h2>\n          {\n            (this.state.selection.x1 !== undefined) ?\n              (this.state.selection.x1 === this.state.selection.x2 && this.state.selection.y1 == this.state.selection.y2) ?\n                <div>({this.state.selection.x1},{this.state.selection.y1})</div>\n              :\n              <div>({this.state.selection.x1},{this.state.selection.y1}) to ({this.state.selection.x2},{this.state.selection.y2})</div>\n            :\n            <div>({this.state.currentMousePosition.x},{this.state.currentMousePosition.y})</div>\n          }\n        </div>\n        <hr/>\n        <div className=\"pixelList\">\n          {\n            this.state.dragging ? \"\" :   <List\n            width={300}\n            height={300}\n            rowCount={this.selectedPixels().length}\n            rowHeight={20}\n            rowRenderer={this.rowRenderer} />\n          }\n        </div>\n\n\n        <style jsx>\n          {`\n            .controls {\n              float: left;\n              color: #fff;\n              font-size: 16px;\n              width: 320px;\n            }\n\n            .pixelList {\n              height: 600px;\n              overflow-y: scroll;\n            }\n\n            .pixelList::-webkit-scrollbar {\n              width:10px; // manage scrollbar width here\n            }\n            .pixelList::-webkit-scrollbar * {\n              background: #222; // manage scrollbar background color here\n            }\n            .pixelList::-webkit-scrollbar-thumb {\n              background:rgba(50,50,50,1) !important; // manage scrollbar thumb background color here\n            }\n\n            .selectionPreview {\n              width: 100px;\n              height: 100px;\n              border: 1px solid #222222;\n              float: left;\n              margin-right: 20px;\n              margin-bottom: 10px;\n            }\n\n            h2 {\n              color: #858585;\n              font-size: 16px;\n              margin: 0;\n              margin-bottom: 10px;\n            }\n\n            hr {\n              clear: both;\n              border-color: #222\n            }\n          `}\n        </style>\n\n      </div>\n\n    </div>\n  }\n}\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAkBA;AACA;AACA;AACA;AACA;AAtBA;AAgCA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AA7CA;AA+CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAzGA;AA2GA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AA1HA;AA4HA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AACA;AACA;AASA;AACA;AAAA;AACA;AACA;AArJA;AAuJA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArLA;AAuLA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhNA;AAuNA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AA9NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAVA;AAeA;AACA;AAjBA;AAAA;AAAA;AAyBA;AACA;AA1BA;AAAA;AAAA;AA6BA;AACA;AA9BA;AAAA;AAAA;AAoOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7BA;AAAA;AAAA;AAAA;AAyFA;AAhWA;AACA;AADA;AAAA;AAmWA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}